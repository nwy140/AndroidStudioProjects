    // inner class can access to other properties in the class
<!--Access Dangerous permissions : https://developer.android.com/guide/topics/permissions/requesting.html-->
    <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION"/>
<!--if you only update xml, click electricity spark to change, without reruning the app-->

In short , 
baseadapter is used to load data, especially from an array list. Context is an instance of the class
Layoutinflater is used to access and modify xml UI
intent is used to change activity. Bundle passes parameters and acts like a sort of constructor for an activity, but not literally.
Bundle takes in whatever intent.putextra(stringname, parameter reference);if intent.putextra("ok",food.ok); if abc = bundle.getString("ok") ; then abc = food.ok 

// setup app
// create inner class to pass parameter using base adapter
// implement members
// return unused functions
// return getCount using size of data arraylist
// use layout inflater to access and edit layout of ticket
// whatever in layout ticket = currentelement in arraylist's data
// create variable = adapter innerclass and pass arratlist
// make listview.adapter = variable created previously

LayoutInflater reads an XML in which we describe how we want a UI layout to be. It then creates actual Viewobjects for UI from that XML.
/*
            val animal = listofAnimals [p0];
            var inflator = context!!.getSystemService(Context.LAYOUT_INFLATER_SERVICE) as LayoutInflater

            var myView = inflator.inflate(R.layout.animal_ticket,null) ; // work with animal_ticket.xml in the code
                                                                                 // convert animal_ticket to be accessed in code
            myView.tvName.text=animal.name!!;
            myView.tvDes.text=animal.des!!;
            myView.ivAnimalImage.setImageResource(animal.image!!);
// intent is used to refer to an activity class of another kotlin file to get in another xml file
                myView.ivAnimalImage.setOnClickListener {
                    val intent =  Intent(context,AnimalInfo::class.java);//Intent takes 2 parameters, current activity which is context, secnd parameter is activity to go to , add ::class.java to take it as a java class
                    intent.putExtra("name",animal.name!!); // .putextra passes parameters in intent when going to an activity
                    intent.putExtra("des",animal.des!!);
                    intent.putExtra("image",animal.image!!);
                    context!!.startActivity(intent); //start acitivity animalinfo, add !! to prevent error nullsafety

                }
		return myView;
// in Activity to goto which is Animal Activity class
        val bundle: Bundle = intent.extras //accepting passing data for intent from main acitivity that changes to animalinfo activity
        val name = bundle.getString("name"); // bundle acts like a constructor for activity ,
        val des = bundle.getString("des");
        val image = bundle.getInt("image"); //get integer because    image id is passed
        ivAnimalImage.setImageResource(image);
        tvName.text = name;
        tvDes.text = des;
// in the end , when app is run, image is clicked, animalinfo activity xml will pop up on screen with correct image, name and des.
*/

To make an activity become startup activity,
go to androidmanifest.xml
copy activity code and paste between activity to be run on startup   
	<intent-filter>

	<action android:name="android.intent.action.MAIN" />

                <category android:name="android.intent.category.LAUNCHER" />
          		</intent-filter>















